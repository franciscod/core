/*
rst ip        instruction      w  r  addr       data_in  data_out   testnum
1   9         16               1  1  10         8        8           __
1   10        26               27 28 38         46       54          __
*/
1___XXXXXXXXX_XXXXXXXXXXXXXXXX_X__X__XXXXXXXXXX_XXXXXXXX_XXXXXXXX //  0 reset

0___000000000_0000000000000000_0__0__XXXXXXXXXX_XXXXXXXX_XXXXXXXX //  1 NOP @0
0___000000001_0000000000000000_0__0__XXXXXXXXXX_XXXXXXXX_XXXXXXXX //  2 NOP @1
0___000000010_0000000000000000_0__0__XXXXXXXXXX_XXXXXXXX_XXXXXXXX //  3 NOP @2
0___000000011_0110011010011001_0__0__XXXXXXXXXX_XXXXXXXX_XXXXXXXX //  4 add ip ip (3+3)
0___000000110_0000000000000000_0__0__XXXXXXXXXX_XXXXXXXX_XXXXXXXX //  5 assert current ip, NOP @6

0___000000111_0111000000010001_0__0__XXXXXXXXXX_XXXXXXXX_XXXXXXXX //  6 movi r1 0x01
0___000001000_0000000000011001_0__0__XXXXXXXXXX_XXXXXXXX_XXXXXXXX //  7 movr ip r1
0___000000001_0000000000000000_0__0__XXXXXXXXXX_XXXXXXXX_XXXXXXXX //  8 assert current ip, NOP @1

0___000000010_0111000000110001_0__0__XXXXXXXXXX_XXXXXXXX_XXXXXXXX //  9 movi r1 0x03
0___000000011_0000000000010010_0__0__XXXXXXXXXX_XXXXXXXX_XXXXXXXX // 10 movr r2 r1
0___000000100_0011000011110010_1__0__0011111111_00000011_XXXXXXXX // 11 storer [rf] r2

// Simple tests
1___XXXXXXXXX_XXXXXXXXXXXXXXXX_X__X__XXXXXXXXXX_XXXXXXXX_XXXXXXXX //  RESET
0___000000000_1111000011111111_1__0__1100001111_XXXXXXXX_11111111 // 00 storei [0x30F] rf
0___000000001_1011000011110001_0__1__1100001111_11111111_XXXXXXXX // 01 loadi  r1      [0x30F]
0___000000010_1111111111110001_1__0__1111111111_XXXXXXXX_11111111 // 02 storei [0x3FF] r1      (assert loadi)
0___000000011_0111000110110010_0__0__XXXXXXXXXX_XXXXXXXX_XXXXXXXX // 03 movi   r2      0x1B
0___000000100_1111111111110010_1__0__1111111111_XXXXXXXX_00011011 // 04 storei [0x3FF] r2      (assert movi)
0___000000101_0110111000010001_0__0__XXXXXXXXXX_XXXXXXXX_XXXXXXXX // 05 sl     r1      1
0___000000110_1111111111110001_1__0__1111111111_XXXXXXXX_11111110 // 06 storei [0x3FF] r1      (assert sl destination)
0___000000111_1111111111111000_1__0__1111111111_XXXXXXXX_00001100 // 07 storei [0x3FF] r8      (assert sl flags)
0___000001000_0110110000010001_0__0__XXXXXXXXXX_XXXXXXXX_XXXXXXXX // 08 sra    r1      1
0___000001001_1111111111110001_1__0__1111111111_XXXXXXXX_11111111 // 09 storei [0x3FF] r1      (assert sra destination)
0___000001010_1111111111111000_1__0__1111111111_XXXXXXXX_00000100 // 0A storei [0x3FF] r8      (assert sra flags)
0___000001011_0110110010010001_0__0__XXXXXXXXXX_XXXXXXXX_XXXXXXXX // 0B srl    r1      1
0___000001100_1111111111110001_1__0__1111111111_XXXXXXXX_01111111 // 0C storei [0x3FF] r1      (assert srl destination)
0___000001101_1111111111111000_1__0__1111111111_XXXXXXXX_00000000 // 0D storei [0x3FF] r8      (assert srl flags)
0___000001110_0110101000010001_0__0__XXXXXXXXXX_XXXXXXXX_XXXXXXXX // 0E cmp    r1      r1
0___000001111_1111111111110001_1__0__1111111111_XXXXXXXX_01111111 // 0F storei [0x3FF] r1      (assert cmp destination)
0___000010000_1111111111111000_1__0__1111111111_XXXXXXXX_00000001 // 10 storei [0x3FF] r8      (assert cmp flags)
0___000010001_0110100000010001_0__0__XXXXXXXXXX_XXXXXXXX_XXXXXXXX // 11 sub    r1      r1
0___000010010_1111111111110001_1__0__1111111111_XXXXXXXX_00000000 // 12 storei [0x3FF] r1      (assert sub destination)
0___000010011_1111111111111000_1__0__1111111111_XXXXXXXX_00000001 // 13 storei [0x3FF] r8      (assert sub flags)
0___000010100_0110011011110010_0__0__XXXXXXXXXX_XXXXXXXX_XXXXXXXX // 14 add    r2      rf
0___000010101_1111111111110010_1__0__1111111111_XXXXXXXX_00011010 // 15 storei [0x3FF] r2      (assert add destination)
0___000010110_1111111111111000_1__0__1111111111_XXXXXXXX_00001000 // 16 storei [0x3FF] r8      (assert add flags)
0___000010111_0110010011110010_0__0__XXXXXXXXXX_XXXXXXXX_XXXXXXXX // 17 xor    r2      rf
0___000011000_1111111111110010_1__0__1111111111_XXXXXXXX_11100101 // 18 storei [0x3FF] r2      (assert xor destination)
0___000011001_1111111111111000_1__0__1111111111_XXXXXXXX_00000100 // 19 storei [0x3FF] r8      (assert xor flags)
0___000011010_0110001011110010_0__0__XXXXXXXXXX_XXXXXXXX_XXXXXXXX // 1A or     r2      rf
0___000011011_1111111111110010_1__0__1111111111_XXXXXXXX_11111111 // 1B storei [0x3FF] r2      (assert or destination)
0___000011100_1111111111111000_1__0__1111111111_XXXXXXXX_00000100 // 1C storei [0x3FF] r8      (assert or flags)
0___000011101_0110000010000010_0__0__XXXXXXXXXX_XXXXXXXX_XXXXXXXX // 1D and     r2      r8
0___000011110_1111111111110010_1__0__1111111111_XXXXXXXX_00000100 // 1E storei [0x3FF] r2      (assert and destination)
0___000011111_1111111111111000_1__0__1111111111_XXXXXXXX_00000000 // 1F storei [0x3FF] r8      (assert and flags)
0___000100000_0011000010010010_1__0__0000100000_XXXXXXXX_00000100 // 20 storer [r9]    r2
0___000100001_0010000010010010_0__1__0000100001_01010101_XXXXXXXX // 21 loadr  r2      [r9]
0___000100010_1111111111110010_1__0__1111111111_XXXXXXXX_01010101 // 22 storei [0x3FF] r2      (assert loadr destination)
0___000100011_0001000010010010_0__0__XXXXXXXXXX_XXXXXXXX_XXXXXXXX // 23 xchg   r2      r9
0___001010101_1111111111110010_1__0__1111111111_XXXXXXXX_00100011 // 55 storei [0x3FF] r2      (assert xchg source and destination)
0___001010110_0000000000101001_0__0__XXXXXXXXXX_XXXXXXXX_XXXXXXXX // 56 storer r9      r2
1___000100011_0000000000000000_0__0__XXXXXXXXXX_XXXXXXXX_XXXXXXXX // 24 NOP, RESET             (assert movr destination)

// Test skip bit
0___000000000_0011000100000000_1__0__0000000000_XXXXXXXX_00000000 // 00 storer [r0]    r0      skippable (does not get skipped)
0___000000001_0111100000001000_0__0__XXXXXXXXXX_XXXXXXXX_XXXXXXXX // 01 movi   r8      0x80    (set skip bit)
0___000000010_0011000100000000_0__0__XXXXXXXXXX_XXXXXXXX_XXXXXXXX // 02 storer [r0]    r0      skippable (gets skipped)
0___000000011_0110011000000000_0__0__XXXXXXXXXX_XXXXXXXX_XXXXXXXX // 03 add    r0      r0      modifies non-S flags
0___000000100_0011000000001000_1__0__0000000000_XXXXXXXX_10000001 // 04 storer [r0]    r8      (assert flags)
0___000000101_0011000100000000_0__0__XXXXXXXXXX_XXXXXXXX_XXXXXXXX // 05 storer [r0]    r0      skippable (gets skipped)
0___000000110_0111000000001000_0__0__XXXXXXXXXX_XXXXXXXX_XXXXXXXX // 06 movi   r8      0x00    (unset skip bit)
0___000000111_0011000100000000_1__0__0000000000_XXXXXXXX_00000000 // 07 storer [r0]    r0      skippable (does not get skipped)
1___000001000_0000000000000000_0__0__XXXXXXXXXX_XXXXXXXX_XXXXXXXX // 08 NOP, RESET
